Abstraction
Hiding internal details and showing functionality is known as abstraction. For example phone call, we don't know the internal processing.


Abstract class in Java
A class which is declared with the abstract keyword is known as an abstract class in Java. It can have abstract and non-abstract methods (method with the body).


Abstraction in Java
Abstraction is a process of hiding the implementation details and showing only functionality to the user.

Another way, it shows only essential things to the user and hides the internal details, for example, sending SMS where you type the text and send the message. You don't know the internal processing about the message delivery.


Abstraction lets you focus on what the object does instead of how it does it.

Ways to achieve Abstraction
There are two ways to achieve abstraction in java
- Abstract class (0 to 100%)
- Interface (100%)


Abstract Method in Java
A method which is declared as abstract and does not have implementation is known as an abstract method.

Example of abstract method
abstract void printStatus();//no method body and abstract


Abstract class in Java
A class which is declared as abstract is known as an abstract class. It can have abstract and non-abstract methods. It needs to be extended and its method implemented. It cannot be instantiated.

Points to Remember
- An abstract class must be declared with an abstract keyword.
- It can have abstract and non-abstract methods.
- It cannot be instantiated.
- It can have constructors and static methods also.
- It can have final methods which will force the subclass not to change the body of the method.


Abstract class having constructor, data member and methods
An abstract class can have a data member, abstract method, method body (non-abstract method), constructor, and even main() method.

Rule: If there is an abstract method in a class, that class must be abstract.
Rule: If you are extending an abstract class that has an abstract method, you must either provide the implementation of the method or make this class abstract.


Another real scenario of abstract class
The abstract class can also be used to provide some implementation of the interface. In such case, the end user may not be forced to override all the methods of the interface.


Interface in Java
An interface in Java is a blueprint of a class. It has static constants and abstract methods.

The interface in Java is a mechanism to achieve abstraction. There can be only abstract methods in the Java interface, not method body. It is used to achieve abstraction and multiple inheritance in Java.

In other words, you can say that interfaces can have abstract methods and variables. It cannot have a method body.

Java Interface also represents the IS-A relationship.


It cannot be instantiated just like the abstract class.

- Since Java 8, we can have default and static methods in an interface.
- Since Java 9, we can have private methods in an interface.



Why use Java interface?
There are mainly three reasons to use interface. They are given below.
- It is used to achieve abstraction.
- By interface, we can support the functionality of multiple inheritance.
- It can be used to achieve loose coupling.


How to declare an interface?
An interface is declared by using the interface keyword. It provides total abstraction; means all the methods in an interface are declared with the empty body, and all the fields are public, static and final by default. A class that implements an interface must implement all the methods declared in the interface.

Syntax:
interface <interface_name>{  
    // declare constant fields  
    // declare methods that abstract   
    // by default.  
}


Internal addition by the compiler
The Java compiler adds public and abstract keywords before the interface method. Moreover, it adds public, static and final keywords before data members.

In other words, Interface fields are public, static and final by default, and the methods are public and abstract.


The relationship between classes and interfaces
A class extends another class, an interface extends another interface, but a class implements an interface.


Multiple inheritance in Java by interface
If a class implements multiple interfaces, or an interface extends multiple interfaces, it is known as multiple inheritance.


Q) Multiple inheritance is not supported through class in java, but it is possible by an interface, why?
As we have explained in the inheritance chapter, multiple inheritance is not supported in the case of class because of ambiguity. However, it is supported in case of an interface because there is no ambiguity. It is because its implementation is provided by the implementation class.


Interface inheritance
A class implements an interface, but one interface extends another interface.


Java 8 Default Method in Interface
Since Java 8, we can have method body in interface. But we need to make it default method.


Java 8 Static Method in Interface
Since Java 8, we can have static method in interface.



Difference Between Abstract Class and Interface
1) Abstract class can have abstract and non-abstract methods.
Interface can have only abstract methods. Since Java 8, it can have default and static methods also.

2) Abstract class doesn't support multiple inheritance.
Interface supports multiple inheritance.

3) Abstract class can have final, non-final, static and non-static variables.
Interface has only static and final variables.

4) Abstract class can provide the implementation of interface.
Interface can't provide the implementation of abstract class.

5) The abstract keyword is used to declare abstract class.
The interface keyword is used to declare interface.

6) An abstract class can extend another Java class and implement multiple Java interfaces.
An interface can extend another Java interface only.

7) An abstract class can be extended using keyword "extends".
An interface can be implemented using keyword "implements".

8) A Java abstract class can have class members like private, protected, etc.
Members of a Java interface are public by default.

9)Abstract class Example:
public abstract class Shape{
public abstract void draw();
}

InterfaceExample:
public interface Drawable{
void draw();
}

10)Simply, abstract class achieves partial abstraction (0 to 100%).
Interface achieves fully abstraction (100%).

